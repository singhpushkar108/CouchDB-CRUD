{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, ViewChild } from '@angular/core';\nlet FormComponent = class FormComponent {\n  constructor(service) {\n    this.service = service;\n    this.colDisplay = [];\n    this.noData = false;\n    this.succ = false;\n    this.first_name = \"\";\n    this.last_name = \"\";\n    this.email = \"\";\n    this.state = \"\";\n  }\n  ngOnInit() {\n    this.get_alldata();\n  }\n  get_alldata() {\n    this.noData = true;\n    this.service.fetchData('/fetch-all-data').subscribe(res => {\n      if (res.status == 'succ') {\n        this.noData = false;\n        this.all_data = res.data;\n        this.all_data.forEach(element => {\n          Object.keys(element).forEach(key => {\n            ['_id', '_rev'].includes(key) ? null : this.colDisplay.includes(key) ? null : this.colDisplay.push(key);\n          });\n        });\n        console.log(this.colDisplay);\n      } else {\n        console.log(res.msg);\n      }\n    });\n  }\n  delete_data(id, revId) {\n    let obj = {\n      'id': id,\n      'revId': revId\n    };\n    this.service.dataOpr(obj, '/delete-data').subscribe(res => {\n      if (res.status == \"succ\") {\n        this.get_alldata();\n      } else {\n        console.log(res.msg);\n      }\n    });\n  }\n  update_data(data) {\n    console.log(data);\n    let obj = data;\n    this.service.dataOpr(obj, '/update-data').subscribe(response => {\n      // console.log(\"Update Response:\", response);\n      if (response.status == \"succ\") {\n        console.log(this.editModal);\n        // this.editModal.close();\n        /* const modalElement = this.editModal.nativeElement as HTMLElement;\r\n        console.log('Modal Element:', modalElement); // Debugging\r\n        const bootstrapModal = new bootstrap.Modal(modalElement); // Initialize Bootstrap modal\r\n        console.log('Bootstrap Modal Object:', bootstrapModal); // Debugging\r\n        bootstrapModal.dismiss(); */\n        this.succ = true;\n        this.get_alldata();\n      } else {\n        console.log(response.msg);\n      }\n    });\n  }\n  editRow(data) {\n    console.log(data);\n    this.succ = false;\n    this.rowData = {\n      ...data\n    }; // creates a sepearate copy  of the object so that changes don't affect actual data\n  }\n\n  insertData() {\n    let obj = this.testForm.value;\n    console.log(this.testForm.value);\n    this.service.dataOpr(obj, \"/insert-data\").subscribe(response => {\n      if (response.status == \"succ\") {\n        this.get_alldata();\n      } else {\n        console.log(response.msg);\n      }\n    });\n  }\n  resetModal() {\n    this.rowData = [];\n  }\n};\n__decorate([ViewChild('f')], FormComponent.prototype, \"testForm\", void 0);\n__decorate([ViewChild('editModal')], FormComponent.prototype, \"editModal\", void 0);\nFormComponent = __decorate([Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})], FormComponent);\nexport { FormComponent };","map":{"version":3,"mappings":"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","names":["Component","ViewChild","FormComponent","constructor","service","ngOnInit","get_alldata","noData","fetchData","subscribe","res","status","all_data","data","forEach","element","Object","keys","key","includes","colDisplay","push","console","log","msg","delete_data","id","revId","obj","dataOpr","update_data","response","editModal","succ","editRow","rowData","insertData","testForm","value","resetModal","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["C:\\xampp\\htdocs\\CouchdbFrontend\\src\\app\\form\\form.component.ts"],"sourcesContent":["import { Component,ElementRef, OnInit, ViewChild } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { TestServiceService } from '../test-service.service';\ndeclare var bootstrap: any;\n\n@Component({\n  selector: 'app-form',\n  templateUrl: './form.component.html',\n  styleUrls: ['./form.component.css']\n})\nexport class FormComponent implements OnInit {\n  @ViewChild('f') testForm!: NgForm;\n  @ViewChild('editModal') editModal!: ElementRef;\n\n  public colDisplay:any = [];\n  public rowData:any;\n  public noData:boolean=false;\n  public succ:boolean=false;\n  public first_name:any=\"\";\n  public last_name:any=\"\";\n  public email:any=\"\";\n  public state:any=\"\";\n  public age:any;\n  public phone_number:any;\n  public all_data:any;\n\n  constructor(private service:TestServiceService) {}\n\n  ngOnInit() {\n    this.get_alldata(); \n  }\n\n  get_alldata(){\n    this.noData = true\n    this.service.fetchData('/fetch-all-data').subscribe(\n      (res : any)=>{\n     if(res.status == 'succ'){\n      this.noData = false;\n      this.all_data = res.data;\n      this.all_data.forEach((element:any) => {\n        Object.keys(element).forEach((key:string) => {\n        ['_id','_rev'].includes(key) ? null :(this.colDisplay.includes(key)? null: this.colDisplay.push(key));\n        });\n      });\n\n      console.log(this.colDisplay);\n    }else{\n      console.log(res.msg);\n    }\n  });  \n  }\n\n\n  delete_data(id:any,revId:any){\n    let obj={'id':id,\n            'revId' :revId \n            };\n    this.service.dataOpr(obj , '/delete-data').subscribe( \n      (res)=> {\n\n        if(res.status == \"succ\"){\n          this.get_alldata();\n        }else{\n          console.log(res.msg);\n        }\n    }\n    );\n\n  }\n\n\n  update_data(data:any){\n    console.log(data);\n    let obj = data;\n    this.service.dataOpr(obj , '/update-data').subscribe((response)=>{\n      \n      // console.log(\"Update Response:\", response);\n      if(response.status==\"succ\"){\n        console.log(this.editModal);\n        // this.editModal.close();\n        /* const modalElement = this.editModal.nativeElement as HTMLElement;\n        console.log('Modal Element:', modalElement); // Debugging\n        const bootstrapModal = new bootstrap.Modal(modalElement); // Initialize Bootstrap modal\n        console.log('Bootstrap Modal Object:', bootstrapModal); // Debugging\n        bootstrapModal.dismiss(); */\n        this.succ = true;\n\n        \n\n        this.get_alldata();\n\n      }else{\n        console.log(response.msg);\n      }\n    }\n\n    );\n  }\n\n\n  editRow(data:any){\n    console.log(data);\n    this.succ = false;\n    this.rowData = {...data}; // creates a sepearate copy  of the object so that changes don't affect actual data\n  }\n\n  insertData(){\n    let obj = this.testForm.value;\n    console.log(this.testForm.value);\n    this.service.dataOpr(obj, \"/insert-data\").subscribe((response) => {\n      \n      if(response.status==\"succ\"){\n          this.get_alldata();\n      }else{\n        console.log(response.msg);\n      }\n      \n    });\n\n  }\n\n\n  resetModal(){\n    this.rowData= [];\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}